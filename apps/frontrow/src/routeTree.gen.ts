/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestGradientShadergradientRouteImport } from './routes/test-gradient-shadergradient'
import { Route as TestGradientRouteImport } from './routes/test-gradient'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as EventEventNameRouteImport } from './routes/event.$eventName'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'

const TestGradientShadergradientRoute =
  TestGradientShadergradientRouteImport.update({
    id: '/test-gradient-shadergradient',
    path: '/test-gradient-shadergradient',
    getParentRoute: () => rootRouteImport,
  } as any)
const TestGradientRoute = TestGradientRouteImport.update({
  id: '/test-gradient',
  path: '/test-gradient',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventEventNameRoute = EventEventNameRouteImport.update({
  id: '/event/$eventName',
  path: '/event/$eventName',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/test-gradient': typeof TestGradientRoute
  '/test-gradient-shadergradient': typeof TestGradientShadergradientRoute
  '/event/$eventName': typeof EventEventNameRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/test-gradient': typeof TestGradientRoute
  '/test-gradient-shadergradient': typeof TestGradientShadergradientRoute
  '/event/$eventName': typeof EventEventNameRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/test-gradient': typeof TestGradientRoute
  '/test-gradient-shadergradient': typeof TestGradientShadergradientRoute
  '/event/$eventName': typeof EventEventNameRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/test-gradient'
    | '/test-gradient-shadergradient'
    | '/event/$eventName'
    | '/api/auth/$'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/login'
    | '/test-gradient'
    | '/test-gradient-shadergradient'
    | '/event/$eventName'
    | '/api/auth/$'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/login'
    | '/test-gradient'
    | '/test-gradient-shadergradient'
    | '/event/$eventName'
    | '/api/auth/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
  TestGradientRoute: typeof TestGradientRoute
  TestGradientShadergradientRoute: typeof TestGradientShadergradientRoute
  EventEventNameRoute: typeof EventEventNameRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test-gradient-shadergradient': {
      id: '/test-gradient-shadergradient'
      path: '/test-gradient-shadergradient'
      fullPath: '/test-gradient-shadergradient'
      preLoaderRoute: typeof TestGradientShadergradientRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/test-gradient': {
      id: '/test-gradient'
      path: '/test-gradient'
      fullPath: '/test-gradient'
      preLoaderRoute: typeof TestGradientRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/event/$eventName': {
      id: '/event/$eventName'
      path: '/event/$eventName'
      fullPath: '/event/$eventName'
      preLoaderRoute: typeof EventEventNameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  TestGradientRoute: TestGradientRoute,
  TestGradientShadergradientRoute: TestGradientShadergradientRoute,
  EventEventNameRoute: EventEventNameRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
